# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'handas.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QShortcut, QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(552, 524)
        self.LIST_PD=['', '', '', '', '']
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.Btn_onc(0))
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(lambda: self.Btn_onc(1))
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(lambda: self.Btn_onc(2))
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.Btn_onc(3))
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.Btn_onc(4))
        self.horizontalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.textChanged.connect(self.doSomething)
        self.verticalLayout_2.addWidget(self.textEdit)
        self.verticalLayout.addLayout(self.verticalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.msgSc = QShortcut(QKeySequence('Alt+1'), MainWindow)
        self.msgSc.activated.connect(lambda: self.Btn_onc(0))
        self.msgSc = QShortcut(QKeySequence('Alt+2'), MainWindow)
        self.msgSc.activated.connect(lambda: self.Btn_onc(1))
        self.msgSc = QShortcut(QKeySequence('Alt+3'), MainWindow)
        self.msgSc.activated.connect(lambda: self.Btn_onc(2))
        self.msgSc = QShortcut(QKeySequence('Alt+4'), MainWindow)
        self.msgSc.activated.connect(lambda: self.Btn_onc(3))
        self.msgSc = QShortcut(QKeySequence('Alt+5'), MainWindow)
        self.msgSc.activated.connect(lambda: self.Btn_onc(4))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Dự đoán"))
        self.pushButton_3.setText(_translate("MainWindow", "1"))
        self.pushButton_4.setText(_translate("MainWindow", "2"))
        self.pushButton_5.setText(_translate("MainWindow", "3"))
        self.pushButton_2.setText(_translate("MainWindow", "4"))
        self.pushButton.setText(_translate("MainWindow", "5"))
        self.label.setText(_translate("MainWindow", "Nhập văn bản"))

    def doSomething(self):
        _translate = QtCore.QCoreApplication.translate
        list_at = Next_Word_Prediction(str(self.textEdit.toPlainText()), 4)
        list_af = from_text_Next_Word_Prediction(str(self.textEdit.toPlainText()), 1)
        self.pushButton_3.setText(_translate("MainWindow", list_at[0][0]))
        self.pushButton_4.setText(_translate("MainWindow", list_at[1][0]))
        self.pushButton_5.setText(_translate("MainWindow", list_at[2][0]))
        self.pushButton_2.setText(_translate("MainWindow", list_at[3][0]))
        self.pushButton.setText(_translate("MainWindow", list_af[0][0]))
        self.LIST_PD = [list_at[0][1], list_at[1][1], list_at[2][1], list_at[3][1], list_af[0][1]]

    def Btn_onc(self, n):
        self.textEdit.textCursor().insertText(self.LIST_PD[n])

    def on_open(self):
        print('Ctrl O has been fired')


import json
import underthesea

list_text = []


with open('words.txt', encoding="UTF-8", errors='ignore') as file:
    for line in file:
        json_data = json.loads(line)
        list_text.append(json_data['text'])
print("sta")

PREDICTED_LENGTH = 5


def Next_Word_Prediction(text, n=3):
    prediction_list = []
    if text == "":
        for i in range(n):
            prediction_list.append(["", ""])
        return prediction_list
    if text[-1] == " ":
        text_n = text.split()[-PREDICTED_LENGTH:]
        text_n[-1] = text_n[-1]+" "
    else:
        text_n = text.split()[-PREDICTED_LENGTH:]
    while len(text_n) > 0:
        text = " ".join(text_n)
        for text_p in list_text:
            if text == text_p:
                continue
            elif text in text_p:
                if text_p.startswith(text):
                    prediction = text_p.replace(text, "", 1)
                    prediction_op = [text_p, prediction]
                    prediction_list.append(prediction_op)
        prediction_list.sort(key=lambda s: len(s[0]))
        len_prediction_list = len(prediction_list) >= n
        for x in prediction_list:
            if len(x[0].split()) >= PREDICTED_LENGTH and len_prediction_list >= n:
                prediction_list.remove(x)
        if len(prediction_list) >= n:
            return prediction_list[0:n]
        text_n.pop(0)
    for i in range(n-len(prediction_list)):
        prediction_list.append(["", ""])
    return prediction_list


def from_text_Next_Word_Prediction(text, n=3):
    list_text_pd = underthesea.word_tokenize(text)[:-1]
    prediction_list = []
    if text == "":
        for i in range(n):
            prediction_list.append(["", ""])
        return prediction_list
    if text[-1] == " ":
        text_n = text[-PREDICTED_LENGTH*9:].split()[-PREDICTED_LENGTH:]
        text_n[-1] = text_n[-1]+" "
    else:
        text_n = text[-PREDICTED_LENGTH*9:].split()[-PREDICTED_LENGTH:]
    print(text)
    print(text_n)
    len_list_text_pd = len(list_text_pd)
    while len(text_n) > 0:
        text = " ".join(text_n)
        for ind, text_p in enumerate(list_text_pd):
            if text.strip() == text_p:
                if ind < len_list_text_pd:
                    prediction = list_text_pd[ind+1]
                    if text[-1] == " ":
                        prediction_op = [prediction, prediction]
                    else:
                        prediction_op = [prediction, " "+prediction]
                    prediction_list.append(prediction_op)
            elif text in text_p:
                if text_p.startswith(text):
                    prediction = text_p.replace(text, "", 1)
                    prediction_op = [text_p, prediction]
                    prediction_list.append(prediction_op)
        prediction_list.sort(key=lambda s: len(s[0]))
        len_prediction_list = len(prediction_list) >= n
        for x in prediction_list:
            if len(x[0].split()) >= PREDICTED_LENGTH and len_prediction_list >= n:
                prediction_list.remove(x)
        if len(prediction_list) >= n:
            return prediction_list[0:n]
        text_n.pop(0)
    for i in range(n-len(prediction_list)):
        prediction_list.append(["", ""])
    return prediction_list


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
